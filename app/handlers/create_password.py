from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums import ParseMode

from random import choice

router = Router()


class CreatePasswords(StatesGroup):
    quantity = State()
    lenght = State()



def generation(lenght):
    chars = "123456789abcdefghjkmnpqrstuvwxyzABCDEFGHIJKMNPQRSTUVWXYZ"
    return ''.join(choice(chars) for _ in range(lenght))



@router.message(StateFilter(None), Command('new'))
async def new_password(message: Message, state: FSMContext):
    await message.answer(
        text="üí≠ –î–ª—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–∞–∫–æ–π –¥–ª–∏–Ω—ã –æ–Ω–∏ –±—É–¥—É—Ç.")

    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (–º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚Äî 20). –î–ª—è –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel."
    )
    await state.set_state(CreatePasswords.quantity)


#quantity
@router.message(CreatePasswords.quantity, 
                lambda message: message.text.isdigit() and int(message.text) in range(1, 21))
async def lenght(message: Message, state: FSMContext):
    await state.update_data(quantity=message.text)
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–æ–ª—è (–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –±–æ–ª—å—à–µ 25).")
    await state.set_state(CreatePasswords.lenght)


#lenght
@router.message(CreatePasswords.lenght, 
                lambda message: message.text.isdigit() and int(message.text) in range(6, 26))
async def lenght(message: Message, state: FSMContext):
    await state.update_data(lenght=message.text)
    user_data = await state.get_data()

    for _ in range(int(user_data["quantity"])):
        await message.answer(
            text=f'`{generation(int(user_data["lenght"]))}`',
            parse_mode=ParseMode.MARKDOWN_V2
            )
    await message.answer(f"‚úÖ –ü–∞—Ä–æ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {user_data['quantity']}")
    await state.clear()



#cancel handlers
@router.message(CreatePasswords.lenght, Command("cancel"))
@router.message(CreatePasswords.quantity, Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.")


@router.message(StateFilter(None), Command("cancel"))
async def cmd_cancel_no_state(message: Message, state: FSMContext):
    await state.set_data({}) #data reset
    await message.answer(
        text="‚öôÔ∏è –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è...")


#incorrect-handlers
@router.message(CreatePasswords.quantity)
async def quantity_incorrect(message: Message):
    if not message.text.isdigit():
        await message.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.')
    elif message.text.isdigit() and int(message.text) == 0:
        await message.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞. –ù—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...')
    elif message.text.isdigit() and int(message.text) not in range(1, 21):
        await message.answer('‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä–æ–ª–µ–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...')
    

@router.message(CreatePasswords.lenght)
async def lenght_incorrect(message: Message):
    if message.text.isdigit() and int(message.text) not in range(6, 26):
        await message.answer('‚ö†Ô∏è –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª–µ–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...')

    elif not message.text.isdigit():
        await message.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.')

   


    



